mutate(
income_type = "inout"
) |>
rename(
"value" = "InOuts_inout_Amount",
"currency" = "InOuts_inout_Currency",
"income_date" = "DeclarationSubmitDate",
) -> inouts
read_json(file_list[1])
read_json(file_list[1]) |> flatten()
read_json(file_list[1]) |> flatten() |> as_tibble() |> select(-c(1:3))
read_json(file_list[1]) |> flatten() |> as_tibble()
read_json(file_list[1]) |> flatten() |>
unnest_wider(col = `..JSON`, names_sep = "_") |>
as_tibble()
read_json(file_list[1]) |> # flatten() |>
unnest_wider(col = `..JSON`, names_sep = "_") |>
as_tibble()
read_json(file_list[1]) |> # flatten() |>
unnest_wider(col = `..JSON`, names_sep = "_") |>
as_tibble() |> View()
read_json(file_list[2]) |> # flatten() |>
unnest_wider(col = `..JSON`, names_sep = "_") |>
as_tibble() |> View()
read_json(file_list[461]) |> # flatten() |>
unnest_wider(col = `..JSON`, names_sep = "_") |>
as_tibble() |> View()
View((as_tibble(unnest_wider(read_json(file_list[461]), col = ..JSON,      names_sep = "_")))[[2]][[1]])
(as_tibble(unnest_wider(read_json(file_list[461]), col = ..JSON,
file_list[461]
file_list
read_json(file_list[402]) |> # flatten() |>
unnest_wider(col = `..JSON`, names_sep = "_") |>
as_tibble() |> View()
View((as_tibble(unnest_wider(read_json(file_list[402]), col = ..JSON,      names_sep = "_")))[[2]][[1]])
file_list[402]
read_json(file_list[402]) |> as_tibble()
jsonlite::read_json(file_list[402])
jsonlite::read_json(file_list[402]) |>
as_tibble() |> View()
jsonlite::read_json(file_list[402]) |>
unnest_wider() |> View()
jsonlite::read_json(file_list[402]) |> View()
jsonlite::read_json(file_list[402]) |> flatten() |> View()
jsonlite::read_json(file_list[402]) |>
tidyjson::as_data_frame() |> View()
jsonlite::read_json(file_list[402]) |>
tidyjson::as_tibble() |> View()
jsonlite::fromJSON()(file_list[402]) |>
tidyjson::as_tibble() |> View()
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble() |> View()
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |>
unnest_longer(col = InOuts) |>
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_") |>
select(
Id:DeclarationSubmitDate, InOuts_inout_InOutKind:InOuts_inout_RelationName
) |>
mutate(
income_type = "inout"
) |>
rename(
"value" = "InOuts_inout_Amount",
"currency" = "InOuts_inout_Currency",
"income_date" = "DeclarationSubmitDate",
) -> inouts
rlang::last_trace()
jsonlite::fromJSON(file_list[3]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |>
unnest_longer(col = InOuts) |>
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_") |> View()
jsonlite::fromJSON(file_list[3]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts)
jsonlite::fromJSON(file_list[3]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |>
unnest_longer(col = InOuts)
jsonlite::fromJSON(file_list[3]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |>
unnest_longer(col = InOuts) |>
tibble()
jsonlite::fromJSON(file_list[3]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |>
unnest_longer(col = InOuts) |>
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_")
jsonlite::fromJSON(file_list[10]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |>
unnest_longer(col = InOuts) |>
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_")
jsonlite::fromJSON(file_list[10]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |>
unnest_longer(col = InOuts) |>
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_") |>
select(
Id:DeclarationSubmitDate, InOuts_inout_InOutKind:InOuts_inout_RelationName
)
mutate(
income_type = "inout"
)
jsonlite::fromJSON(file_list[10]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |>
unnest_longer(col = InOuts) |>
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_") |>
select(
Id:DeclarationSubmitDate, InOuts_inout_InOutKind:InOuts_inout_RelationName
) |>
mutate(
income_type = "inout"
)
jsonlite::fromJSON(file_list[10]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |>
unnest_longer(col = InOuts) |>
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_") |>
select(
Id:DeclarationSubmitDate, InOuts_inout_InOutKind:InOuts_inout_RelationName
) |>
mutate(
income_type = "inout"
) |>
rename(
"value" = "InOuts_inout_Amount",
"currency" = "InOuts_inout_Currency",
"income_date" = "DeclarationSubmitDate",
) -> inouts
View(inouts)
View(inouts[[9]][[1]])
View(inouts[[10]][[1]])
file_list[402]
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble()
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |>
unnest_longer(col = InOuts)
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |> View()
View((select(tidyjson::as_tibble(jsonlite::fromJSON(file_list[402])),      Id:BirthDate, DeclarationSubmitDate, InOuts))[[9]][[1]])
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |>
# unnest_longer(col = InOuts)
# tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_") |> View()
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts)%>%
mutate(
InOuts = map(InOuts, ~if(is.list(.x)) .x else list(.x))
)
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_") |> View()
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts)%>%
mutate(
InOuts = map(InOuts, ~if(is.list(.x)) .x else list(.x))
) |>
unnest_longer(col = InOuts) |>
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_") |> View()
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts)%>%
mutate(
InOuts = map(InOuts, ~if(is.data.frame(.x)) .x else data.frame(.x))
) |>
unnest_longer(col = InOuts) |>
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_") |> View()
library(tidyverse)
library(jsonlite)
library(httr)
library(extrafont)
library(extrafontdb)
library(showtext)
library(tidyjson)
font_add(
"BPG SSP Crystal",
regular = "C:/Windows/Fonts/BPG_SSP_Crystal.ttf",
italic = "C:/Windows/Fonts/BPG_SSP_Crystal_Italic.ttf",
bold = "C:/Windows/Fonts/BPG_SSP_Crystal_Bold.ttf",
bolditalic = "C:/Windows/Fonts/BPG_SSP_Crystal_BoldItalic.ttf",
)
font_add(
"BPG SSP Crystal Caps",
regular = "C:/Windows/Fonts/BPG_SSP_Crystal_Caps.ttf",
italic = "C:/Windows/Fonts/BPG_SSP_Crystal_Italic_Caps.ttf",
bold = "C:/Windows/Fonts/BPG_SSP_Crystal_Bold_Caps.ttf",
bolditalic = "C:/Windows/Fonts/BPG_SSP_Crystal_BoldItalic_Caps.ttf",
)
font_add(
"Enciklopediuri _Uni MT",
regular = "C:\\Windows\\Fonts\\Enciklopediuri _Uni MT.ttf",
italic = "C:\\Windows\\Fonts\\Enciklopediuri _Uni MT Italic.ttf",
bold = "C:\\Windows\\Fonts\\Enciklopediuri _Uni MT Bold.ttf",
bolditalic = "C:\\Windows\\Fonts\\Enciklopediuri _Uni MT Bold Italic.ttf",
)
font_add(
"Enciklopediuri _Uni Nus",
regular = "C:\\Windows\\Fonts\\Enciklopediuri _Uni Nus.ttf",
italic = "C:\\Windows\\Fonts\\Enciklopediuri _Uni Nus Italic.ttf",
bold = "C:\\Windows\\Fonts\\Enciklopediuri _Uni Nus Bold.ttf",
bolditalic = "C:\\Windows\\Fonts\\Enciklopediuri _Uni Nus Bold Italic.ttf",
)
theme_ds <- function () {
theme_minimal(base_size = 14) %+replace%
theme(
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
axis.title = element_blank(),
title = element_blank(),
# axis.text.x = element_blank(),
# panel.grid = element_blank(),
strip.text = element_text(family = "Enciklopediuri _Uni Nus", face="bold", size = 28),
text = element_text(family= "Enciklopediuri _Uni Nus"),
plot.title = element_text(size=28, face="bold", family="Enciklopediuri _Uni MT", hjust = 0),
plot.subtitle = element_text(size=24, family="Enciklopediuri _Uni Nus", hjust=0),
plot.caption = element_text(size=12, family="Enciklopediuri _Uni Nus", hjust=0),
axis.text = element_text(size=18, family="Enciklopediuri _Uni Nus", color = "black"),
legend.position = "none"
)
}
file_list <- dir("raw_json", pattern = "*.json", full.names = TRUE)
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts)%>%
mutate(
InOuts = map(InOuts, ~if(is.data.frame(.x)) .x else data.frame(.x))
) |>
unnest_longer(col = InOuts) |>
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_") |> View()
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts)%>%
# mutate(
#   InOuts = map(InOuts, ~if(is.data.frame(.x)) .x else data.frame(.x))
# ) |>
unnest_longer(col = InOuts) |>
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_") |> View()
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts)%>%
# mutate(
#   InOuts = map(InOuts, ~if(is.data.frame(.x)) .x else data.frame(.x))
# ) |>
unnest_longer(col = InOuts) |>
tibble() |> View()
sf::get_wfs
tmap::get_wfs
library(tidyverse)
library(jsonlite)
library(httr)
library(extrafont)
library(extrafontdb)
library(showtext)
library(tidyjson)
font_add(
"BPG SSP Crystal",
regular = "C:/Windows/Fonts/BPG_SSP_Crystal.ttf",
italic = "C:/Windows/Fonts/BPG_SSP_Crystal_Italic.ttf",
bold = "C:/Windows/Fonts/BPG_SSP_Crystal_Bold.ttf",
bolditalic = "C:/Windows/Fonts/BPG_SSP_Crystal_BoldItalic.ttf",
)
font_add(
"BPG SSP Crystal Caps",
regular = "C:/Windows/Fonts/BPG_SSP_Crystal_Caps.ttf",
italic = "C:/Windows/Fonts/BPG_SSP_Crystal_Italic_Caps.ttf",
bold = "C:/Windows/Fonts/BPG_SSP_Crystal_Bold_Caps.ttf",
bolditalic = "C:/Windows/Fonts/BPG_SSP_Crystal_BoldItalic_Caps.ttf",
)
font_add(
"Enciklopediuri _Uni MT",
regular = "C:\\Windows\\Fonts\\Enciklopediuri _Uni MT.ttf",
italic = "C:\\Windows\\Fonts\\Enciklopediuri _Uni MT Italic.ttf",
bold = "C:\\Windows\\Fonts\\Enciklopediuri _Uni MT Bold.ttf",
bolditalic = "C:\\Windows\\Fonts\\Enciklopediuri _Uni MT Bold Italic.ttf",
)
font_add(
"Enciklopediuri _Uni Nus",
regular = "C:\\Windows\\Fonts\\Enciklopediuri _Uni Nus.ttf",
italic = "C:\\Windows\\Fonts\\Enciklopediuri _Uni Nus Italic.ttf",
bold = "C:\\Windows\\Fonts\\Enciklopediuri _Uni Nus Bold.ttf",
bolditalic = "C:\\Windows\\Fonts\\Enciklopediuri _Uni Nus Bold Italic.ttf",
)
theme_ds <- function () {
theme_minimal(base_size = 14) %+replace%
theme(
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
axis.title = element_blank(),
title = element_blank(),
# axis.text.x = element_blank(),
# panel.grid = element_blank(),
strip.text = element_text(family = "Enciklopediuri _Uni Nus", face="bold", size = 28),
text = element_text(family= "Enciklopediuri _Uni Nus"),
plot.title = element_text(size=28, face="bold", family="Enciklopediuri _Uni MT", hjust = 0),
plot.subtitle = element_text(size=24, family="Enciklopediuri _Uni Nus", hjust=0),
plot.caption = element_text(size=12, family="Enciklopediuri _Uni Nus", hjust=0),
axis.text = element_text(size=18, family="Enciklopediuri _Uni Nus", color = "black"),
legend.position = "none"
)
}
file_list <- dir("raw_json", pattern = "*.json", full.names = TRUE)
jsonlite::fromJSON(file_list[402]) |>
tidyjson::as_tibble() |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts)%>%
# mutate(
#   InOuts = map(InOuts, ~if(is.data.frame(.x)) .x else data.frame(.x))
# ) |>
unnest_longer(col = InOuts) |>
tibble() |> View()
library(tidyverse)
library(jsonlite)
library(httr)
library(extrafont)
library(extrafontdb)
library(showtext)
library(tidyjson)
font_add(
"BPG SSP Crystal",
regular = "C:/Windows/Fonts/BPG_SSP_Crystal.ttf",
italic = "C:/Windows/Fonts/BPG_SSP_Crystal_Italic.ttf",
bold = "C:/Windows/Fonts/BPG_SSP_Crystal_Bold.ttf",
bolditalic = "C:/Windows/Fonts/BPG_SSP_Crystal_BoldItalic.ttf",
)
font_add(
"BPG SSP Crystal Caps",
regular = "C:/Windows/Fonts/BPG_SSP_Crystal_Caps.ttf",
italic = "C:/Windows/Fonts/BPG_SSP_Crystal_Italic_Caps.ttf",
bold = "C:/Windows/Fonts/BPG_SSP_Crystal_Bold_Caps.ttf",
bolditalic = "C:/Windows/Fonts/BPG_SSP_Crystal_BoldItalic_Caps.ttf",
)
font_add(
"Enciklopediuri _Uni MT",
regular = "C:\\Windows\\Fonts\\Enciklopediuri _Uni MT.ttf",
italic = "C:\\Windows\\Fonts\\Enciklopediuri _Uni MT Italic.ttf",
bold = "C:\\Windows\\Fonts\\Enciklopediuri _Uni MT Bold.ttf",
bolditalic = "C:\\Windows\\Fonts\\Enciklopediuri _Uni MT Bold Italic.ttf",
)
font_add(
"Enciklopediuri _Uni Nus",
regular = "C:\\Windows\\Fonts\\Enciklopediuri _Uni Nus.ttf",
italic = "C:\\Windows\\Fonts\\Enciklopediuri _Uni Nus Italic.ttf",
bold = "C:\\Windows\\Fonts\\Enciklopediuri _Uni Nus Bold.ttf",
bolditalic = "C:\\Windows\\Fonts\\Enciklopediuri _Uni Nus Bold Italic.ttf",
)
theme_ds <- function () {
theme_minimal(base_size = 14) %+replace%
theme(
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
axis.title = element_blank(),
title = element_blank(),
# axis.text.x = element_blank(),
# panel.grid = element_blank(),
strip.text = element_text(family = "Enciklopediuri _Uni Nus", face="bold", size = 28),
text = element_text(family= "Enciklopediuri _Uni Nus"),
plot.title = element_text(size=28, face="bold", family="Enciklopediuri _Uni MT", hjust = 0),
plot.subtitle = element_text(size=24, family="Enciklopediuri _Uni Nus", hjust=0),
plot.caption = element_text(size=12, family="Enciklopediuri _Uni Nus", hjust=0),
axis.text = element_text(size=18, family="Enciklopediuri _Uni Nus", color = "black"),
legend.position = "none"
)
}
readxl::read_excel("datasets/samomxmareblo-fasebis-indeqsebi-2010-wlis-sashualo=100.xlsx", 1) |>
slice(3:n()) |>
set_names("year", paste0("m", 1:12)) |>
pivot_longer(-year, names_to = "month", values_to = "cpi") |>
mutate(
cpi = as.numeric(cpi)
) |>
group_by(year) |>
summarize(
cpi = mean(cpi, na.rm=T)/100
) -> cpi
url <- "https://declaration.acb.gov.ge/Api/Declarations?&OrganisationIds=441"
parliament <- read_json("parliament_apr18_2024.json")
parliament |>
tibble() |>
unnest_wider(col = parliament) |>
select(Id:BirthDate, DeclarationSubmitDate, InOuts) |>
unnest_longer(col = InOuts) |>
tibble() |>
unnest_wider(col = InOuts, names_sep = "_inout_") |>
select(
Id:DeclarationSubmitDate, InOuts_inout_InOutKind:InOuts_inout_RelationName
) |>
mutate(
income_type = "inout"
) |>
rename(
"value" = "InOuts_inout_Amount",
"currency" = "InOuts_inout_Currency",
"income_date" = "DeclarationSubmitDate",
) -> inouts
parliament
View(parliament)
parliament |> tibble()
### Load necessary packages
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(lratools)
library(openxlsx)
library(haven)
library(labelled)
library(sampling)
allocation_path <- here::here("GAP 2025 Indonesia Allocation Table_26AUG2024.xlsx")
allocation_path
readxl::read_excel(allocation_path, sheet = "Allocation" ) -> allocation_raw
allocation_path
allocation_path <- here::here("GAP 2025 Indonesia Allocation Table_26AUG2024.xlsx") |>
str_replace("\/", "\/\/")
allocation_path <- here::here("GAP 2025 Indonesia Allocation Table_26AUG2024.xlsx") |>
str_replace("//", "\/\/")
allocation_path <- here::here("GAP 2025 Indonesia Allocation Table_26AUG2024.xlsx") |>
str_replace("//", "////")
allocation_path
readxl::read_excel(allocation_path, sheet = "Allocation" ) -> allocation_raw
library(tidyverse)
library(jsonlite)
library(httr)
library(extrafont)
loadfonts(device = "win")
setwd('D:\\Dropbox (Personal)\\My projects\\scratchpad\\declarations')
# for(i in 450:828) {
for(i in 1:828) {
url <- paste0("https://declaration.acb.gov.ge/Api/Declarations?&OrganisationIds=", i)
req <- POST(url = url,
add_headers(.headers =
c('User-Agent'= 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0',
'Accept' = 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
'Accept-Language' = 'en-CA,en-US;q=0.7,en;q=0.3',
'Accept-Encoding' = 'gzip, deflate, br',
'Content-Type' = 'application/json;charset=utf-8',
'Connection' = 'keep-alive',
'Upgrade-Insecure-Requests' = '1',
'Sec-Fetch-Dest' = 'document',
'Sec-Fetch-Mode' = 'navigate',
'Sec-Fetch-Site' = 'cross-site'
)))
content(req) |> write_json(paste0("raw_json/", i, '.json'))
Sys.sleep(2)
}
i
# for(i in 450:828) {
for(i in 429:828) {
url <- paste0("https://declaration.acb.gov.ge/Api/Declarations?&OrganisationIds=", i)
req <- POST(url = url,
add_headers(.headers =
c('User-Agent'= 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0',
'Accept' = 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
'Accept-Language' = 'en-CA,en-US;q=0.7,en;q=0.3',
'Accept-Encoding' = 'gzip, deflate, br',
'Content-Type' = 'application/json;charset=utf-8',
'Connection' = 'keep-alive',
'Upgrade-Insecure-Requests' = '1',
'Sec-Fetch-Dest' = 'document',
'Sec-Fetch-Mode' = 'navigate',
'Sec-Fetch-Site' = 'cross-site'
)))
content(req) |> write_json(paste0("raw_json/", i, '.json'))
Sys.sleep(2)
}
i
req
content(req)
req |> write_json(paste0("raw_json/", i, '.json'))
req |> writeLines(paste0("raw_json/", i, '.json'))
content(req)
content(req) |> View()
xml_child(content(req), 2)
req
# for(i in 450:828) {
for(i in 430:828) {
url <- paste0("https://declaration.acb.gov.ge/Api/Declarations?&OrganisationIds=", i)
req <- POST(url = url,
add_headers(.headers =
c('User-Agent'= 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0',
'Accept' = 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
'Accept-Language' = 'en-CA,en-US;q=0.7,en;q=0.3',
'Accept-Encoding' = 'gzip, deflate, br',
'Content-Type' = 'application/json;charset=utf-8',
'Connection' = 'keep-alive',
'Upgrade-Insecure-Requests' = '1',
'Sec-Fetch-Dest' = 'document',
'Sec-Fetch-Mode' = 'navigate',
'Sec-Fetch-Site' = 'cross-site'
)))
content(req) |> write_json(paste0("raw_json/", i, '.json'))
Sys.sleep(2)
}
